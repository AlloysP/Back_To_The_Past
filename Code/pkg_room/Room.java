package pkg_room;import pkg_player.Item;import pkg_player.ItemList;import pkg_player.Player;import java.util.Set;import java.util.Iterator;import java.util.HashMap;/** * * Classe du jeu "Back to Past".  * "Back to Past" est un jeu textuel avec interface graphique.   * L'utilisateur peut voyager dans le temps en changeant d'images à chaque nouvelle "pièce". * * *Une Room représente une localisation dans le scénario du jeu. Elle est connecté *aux autres Room par des sorties. Pour chaque sortie existante la Room conserve  *la référence. *  * @author  Petit Alloys * @version 3.0 */public class Room {    private HashMap<String,Room> aExits;    private String aDescription;    private String aImageName;    private ItemList aItem;    private HashMap<String,LockedDoor> aListePortes;    private String aNomRoom;    /**     * Crée une room avec la description aDescription avec l'image donnée.     * Au départ il n'y a pas de sorties.     *      */    public Room(final String pNomRoom, final String pDescription, final String pImage)     {        this.aNomRoom = pNomRoom;        this.aDescription = pDescription;        this.aExits = new HashMap<String,Room>();        this.aImageName = pImage;        this.aItem = new ItemList();        this.aListePortes = new HashMap<String,LockedDoor>();    }    /**     * Définit une sortie de cette room     */    public void setExit(final String pDirection, final Room pNeighbor)     {        this.aExits.put(pDirection, pNeighbor);    }    /**     *      */    public void setLockedDoor(final String pNomPorte,final boolean pPorteOuverte, final String pPorteExitFr, final String pPorteExitEn)     {        LockedDoor vLockedDoor = new LockedDoor(pPorteOuverte, pPorteExitFr, pPorteExitEn);        aListePortes.put(pNomPorte, vLockedDoor);    }    /**     *      */    public HashMap<String, LockedDoor> getListePortes()     {        return aListePortes;    }    /**     * Retourne le aDescription de la salle     *      */    public String getShortDescription()    {        return aDescription;    }    /**     *      * Retourne la room qui est atteinte si nous allons de cette room dans     * la direction pDirection. S'il n'y a pas de salle dans cette     * direction alors retourne null.     */    public Room getExit(final String pDirection)     {        return aExits.get(pDirection);    }    /**     *      * Retourne une longue decription de cette salle.     *      */    public String getLongDescription()    {        return "Tu es ici: " + aDescription + ".\n" + getExitString()+";              "+ getItemsString();    }    /**     *Renvoie une description des sorties d'une pièce,     *par exemple: "Sorties: nord ouest"     *@return Les sorties disponibles.     */    private String getExitString()    {        StringBuilder returnString = new StringBuilder( "Sorties: " );        for ( String vS : aExits.keySet() )            returnString.append( " " + vS );        return returnString.toString();    }    public boolean verifExit(final String pDirection)     {        return aExits.containsKey(pDirection);    }    /**     * Retourne une String décrivant l'image de la room/le nom de l'image     */    public String getImageName()    {        return aImageName;    }	    /**     * Définit un Item dans cette room.     */    public void ajoutItem(final String pNomItem, final Item pItem)     {        this.aItem.mettreItem(pNomItem, pItem);    }        /**     * Retourne une liste de tous les items présents dans la salle     */    public String getItemsString()    {        return("items: "+aItem.getItemsStringListe());    }    /**     * Retourne la HashMap des items     */    public ItemList getAllItems(){        return this.aItem;    }        /**     * Retourne le nom de la room     */    public String getNomRoom(){        return this.aNomRoom;    }    }