package pkg_game;import pkg_commands.Command;import pkg_commands.Command;import pkg_commands.CommandWords;import java.util.StringTokenizer;import java.io.BufferedReader;import java.io.InputStreamReader;/** * Classe du jeu "Back to Past".  * "Back to Past" est un jeuF textuel avec interface graphique.  L'utilisateur peut voyager dans le temps * en changeant d'images à chaque nouvelle "pièce". * * Ce parseur prend la saisie de l'utilisateur  * et essaye de l'interpréter comme une commande du jeu.  * Chaque fois qu'il est appelé il prend une ligne comme commande * et essaye d'interpréter la ligne comme une commande de mot.  * Il rend ensuite la commande. *  *  * L'analyseur syntaxique a un ensemble de mots de commande connus.  * Il vérifie la saisie de l'utilisateur avec les commandes connues  * et si la saisie n'est pas une de ces commandes connues,  * il rend une commande marquée inconnue. *  *  * @author  Petit Alloys * @version 3.0 */public class Parser {    private CommandWords aCommands;     /**     * Crée un nouveau Parser     * Constructeur par defaut qui cree les 2 objets prevus pour les attributs     */    public Parser()     {        this.aCommands = new CommandWords();    }        /**     * Obtient une nouvelle commande de l'utilisateur. La commande est lue en parsant l'"InputLine".     * @return La prochaine commande de l'utilisateur.     */    public Command getCommand(final String pInputLine)     {        String word1;        String word2;                StringTokenizer tokenizer = new StringTokenizer(pInputLine);        if(tokenizer.hasMoreTokens())            word1 = tokenizer.nextToken();        else            word1 = null;        if(tokenizer.hasMoreTokens())            word2 = tokenizer.nextToken();        else            word2 = null;        Command vCommand = aCommands.getCommandWord(word1);        if(vCommand == null) {            return null;        }      vCommand.setSecondWord(word2);      return vCommand;            }        /**     * Affiche une liste des commandes valides.     * @return  Une liste des commandes valides.     */    public String showCommands()    {        return aCommands.getCommandList();    }}